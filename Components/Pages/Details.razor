@using TeamDev360.MediatR.Notification
@using TeamDev360.MediatR.Request
@using TeamDev360.Models
@using TeamDev360.Service
@using global::MediatR
@page "/details/{Id}"

<PageTitle>Details</PageTitle>

<div class="col-xs-12 w-100 h-100 d-flex">
    <div class="col-xs-5"
         style="display: flex; flex-direction: column; justify-content: center; align-items: center;">
        <div class="col-xs-12 d-flex justify-content-center">
            @if (Event.Images != null && Event.Images.Any(_ => _.Ratio == "16_9"))
            {
                <img src="@Event.Images.Where(_ => _.Ratio == "16_9").FirstOrDefault()?.Url" alt="@Event.Name" class="img-fluid" />
            }
            else
            {
                <img src="placeholder.jpg"
                     alt="No image available"
                     class="rounded mx-auto d-block"
                     style="max-width: 80px; height: auto;" />
            }
        </div>

        <!-- Header with Event Name and Icons -->
        <div class="col-xs-12 d-flex justify-content-between align-items-center" style="width: 100%; margin: 20px 0;">
           
            <h3 style="font-weight: bold;">@Event.Name</h3>

            <div style="display: flex; gap: 15px;">
                <img src="../../../assets/Frame 33409.png" alt="Twitter" style="width: 24px; height: 24px;" />
                <img src="../../../assets/Frame 33409-1.png" alt="Youtube" style="width: 24px; height: 24px;" />
                <img src="../../../assets/Frame 33409-2.png" alt="LastFm" style="width: 24px; height: 24px;" />
            </div>
        </div>

        <div class="col-xs-12 d-flex flex-column justify-content-center align-items-center" style="width: 100%; height: 500px; margin-top: 0;">
            <div class="col-xs-12 d-flex" style="width: 100%; flex-direction: row;">
                <div class="col-xs-12 d-flex flex-column justify-content-center align-items-center" style="width: 100%; height: 500px;">
                    <div class="col-xs-12 d-flex" style="width: 100%; flex-direction: row;">
                        <div class="col-xs-4 d-flex flex-column justify-content-start align-items-center" style="flex: 1; height: 100%;">
                            @if (Event.Embedded != null)
                            {
                                var embeddedItems = Event.Embedded.GetNonEmptyItems() ?? new List<Event>(); // Fallback to empty list
                                @foreach (var type in embeddedItems)
                                {
                                    <div class="d-flex" style="background-color: white; margin: 20px 0; padding: 20px; border-radius: 8px; width: 100%;">
                                        <div class="d-flex align-items-start" style="flex: 1;">
                                            @if (type.Images != null && type.Images.Any())
                                            {
                                                <img src="@type.Images.FirstOrDefault()?.Url" alt="@type.Name"
                                                     class="rounded mx-auto d-block"
                                                     style="max-width: 150px; height: auto; margin-right: 20px;" />
                                            }
                                            else
                                            {
                                                <img src="placeholder.jpg"
                                                     alt="No image available"
                                                     class="rounded mx-auto d-block"
                                                     style="max-width: 80px; height: auto; margin-right: 20px;" />
                                            }
                                        </div>

                                        <!-- Event Details: Name, Dates, Country, Address -->
                                        <div class="d-flex flex-column align-items-start" style="flex: 2;">
                                            <span style="font-weight: bold; font-size: 23px;">@type.Name</span>

                                            <!-- Add Date Here -->
                                            @if (type.Dates != null && type.Dates.Start != null)
                                            {
                                                <span style="font-size: 16px;">Date: @type.Dates.Start.LocalDate @type.Dates.Start.LocalTime</span>
                                            }
                                            @if (type.Country != null)
                                            {
                                                <span style="font-size: 16px;">Country: @type.Country.Name</span>
                                            }
                                            @if (type.Address != null)
                                            {
                                                <span style="font-size: 16px;">Address: @type.Address.Line1</span>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Define a property to hold the Id parameter
    [Parameter] public string Id { get; set; }
    [Inject] private IMediator Mediator { get; set; }
    private Event Event { get; set; } = new Event();

    protected override async Task OnInitializedAsync()
    {
        Event = await Mediator.Send(new EventStateRequest() { Id = Id });
    }
}
